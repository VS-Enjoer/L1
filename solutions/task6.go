package Solution

import (
	"context"
	"sync"
)

/*
	Задание 6:
	Реализовать все возможные способы остановки выполнения горутины.
*/

/*
Эта горутина будет выполяться бесконечно, она читает канал exitCh и когда придет туда сигнал,
тогда горутина завершит свое выполнение
*/

func One(exitCh <-chan struct{}) {
	for {
		select {
		//можно добавить кейсов (соответственно и параметров) если будет какая то логика выполнения других кейсов
		case <-exitCh: // Остановка горутины по получению сигнала из канала
			return
		}
	}
}

var mu sync.Mutex

func Two() {

	mu.Lock() //Блокирование горутины

}

func Three(ctx context.Context) {
	for {
		select {
		case <-ctx.Done():
			// Остановка горутины по завершению контекста
			return
		}
	}
}

// Ну еще можно завершить горутину с помощью runtime.Goexit() (Завершается та горутина в которой находится)
